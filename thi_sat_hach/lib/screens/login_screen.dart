import 'package:flutter/material.dart';
import '../db_helper.dart';

// M√†n h√¨nh ƒëƒÉng nh·∫≠p l√† m·ªôt StatefulWidget v√¨ n√≥ c·∫ßn qu·∫£n l√Ω tr·∫°ng th√°i
// c·ªßa c√°c tr∆∞·ªùng nh·∫≠p li·ªáu (controller), tr·∫°ng th√°i t·∫£i (isLoading) v√† hi·ªÉn th·ªã m·∫≠t kh·∫©u.
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  // GlobalKey d√πng ƒë·ªÉ x√°c th·ª±c Form
  final _formKey = GlobalKey<FormState>();
  // Controllers ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu trong c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
  // ƒê√£ ƒë·ªïi t·ª´ _usernameController sang _emailController
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  // Bi·∫øn c·ªù ƒë·ªÉ ·∫©n/hi·ªán m·∫≠t kh·∫©u
  bool _obscurePwd = true;
  // Bi·∫øn c·ªù ƒë·ªÉ theo d√µi tr·∫°ng th√°i t·∫£i (loading) c·ªßa n√∫t b·∫•m
  bool _isLoading = false;

  // Ph∆∞∆°ng th·ª©c b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ x·ª≠ l√Ω logic ƒëƒÉng nh·∫≠p
  Future<void> _login() async {
    // Ki·ªÉm tra n·∫øu form kh√¥ng h·ª£p l·ªá th√¨ d·ª´ng l·∫°i
    if (!_formKey.currentState!.validate()) return;

    // L·∫•y d·ªØ li·ªáu t·ª´ controllers v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    // ƒê√£ ƒë·ªïi t·ª´ username sang email
    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i isLoading ƒë·ªÉ hi·ªÉn th·ªã v√≤ng xoay
    setState(() => _isLoading = true);

    try {
      // Th·ª±c hi·ªán truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ t√¨m ng∆∞·ªùi d√πng
      final result = await DBHelper.instance.rawQuery(
        // L·ªánh SQL ƒë√£ ƒë∆∞·ª£c s·ª≠a: t√¨m ng∆∞·ªùi d√πng v·ªõi email v√† password t∆∞∆°ng ·ª©ng
        "SELECT * FROM users WHERE email = ? AND password = ? LIMIT 1",
        [email, password],
      );

      // N·∫øu t√¨m th·∫•y ng∆∞·ªùi d√πng (k·∫øt qu·∫£ kh√¥ng r·ªóng)
      if (result.isNotEmpty) {
        final user = result.first;
        // Ki·ªÉm tra widget c√≤n mounted kh√¥ng tr∆∞·ªõc khi c·∫≠p nh·∫≠t UI
        if (!mounted) return;

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng")),
        );

        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn m√†n h√¨nh /menu v√† thay th·∫ø m√†n h√¨nh hi·ªán t·∫°i
        Navigator.pushReplacementNamed(context, '/menu', arguments: {'user': user});
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("‚ùå Sai email ho·∫∑c m·∫≠t kh·∫©u")), // S·ª≠a th√¥ng b√°o l·ªói
        );
      }
    } finally {
      // Lu√¥n c·∫≠p nh·∫≠t tr·∫°ng th√°i isLoading v·ªÅ false, ngay c·∫£ khi c√≥ l·ªói
      if (mounted) setState(() => _isLoading = false);
    }
  }

  // Ph∆∞∆°ng th·ª©c build() ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Container ch√≠nh v·ªõi hi·ªáu ·ª©ng gradient
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFFA8E6CF), // M√†u xanh l√° pastel
              Color(0xFFFFD3B6), // M√†u cam pastel
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        // CƒÉn gi·ªØa n·ªôi dung
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            // Th·∫ª Card n·ªïi b·∫≠t v·ªõi ƒë·ªï b√≥ng v√† bo g√≥c
            child: Card(
              elevation: 8,
              color: Colors.white.withOpacity(0.9),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
              child: Padding(
                padding: const EdgeInsets.all(24),
                // Form ƒë·ªÉ ch·ª©a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu v√† th·ª±c hi·ªán validation
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Bi·ªÉu t∆∞·ª£ng kh√≥a l·ªõn
                      const Icon(Icons.lock_outline, size: 80, color: Colors.green),
                      const SizedBox(height: 20),
                      // Ti√™u ƒë·ªÅ "ƒêƒÉng nh·∫≠p"
                      Text(
                        "ƒêƒÉng nh·∫≠p",
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.orange.shade700,
                        ),
                      ),
                      const SizedBox(height: 30),
                      // Tr∆∞·ªùng nh·∫≠p li·ªáu email
                      TextFormField(
                        controller: _emailController,
                        // Th√™m keyboardType l√† email ƒë·ªÉ t·ªëi ∆∞u b√†n ph√≠m
                        keyboardType: TextInputType.emailAddress,
                        validator: (v) {
                          if (v!.isEmpty) {
                            return "Nh·∫≠p email";
                          }
                          // Th√™m validation c∆° b·∫£n cho ƒë·ªãnh d·∫°ng email
                          if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(v.trim())) {
                            return "Email kh√¥ng h·ª£p l·ªá";
                          }
                          return null;
                        },
                        // ƒê√£ s·ª≠a nh√£n v√† icon cho tr∆∞·ªùng email
                        decoration: _inputDecoration("Email", Icons.email),
                      ),
                      const SizedBox(height: 16),
                      // Tr∆∞·ªùng nh·∫≠p li·ªáu m·∫≠t kh·∫©u
                      TextFormField(
                        controller: _passwordController,
                        obscureText: _obscurePwd, // ·∫®n/hi·ªán m·∫≠t kh·∫©u
                        validator: (v) => v!.isEmpty ? "Nh·∫≠p m·∫≠t kh·∫©u" : null,
                        decoration: _inputDecoration("M·∫≠t kh·∫©u", Icons.lock).copyWith(
                          // N√∫t ƒë·ªÉ b·∫≠t/t·∫Øt hi·ªÉn th·ªã m·∫≠t kh·∫©u
                          suffixIcon: IconButton(
                            icon: Icon(
                              _obscurePwd ? Icons.visibility_off : Icons.visibility,
                              color: Colors.grey,
                            ),
                            onPressed: () => setState(() => _obscurePwd = !_obscurePwd),
                          ),
                        ),
                      ),
                      const SizedBox(height: 25),
                      // N√∫t "ƒêƒÉng nh·∫≠p"
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: _isLoading ? null : _login, // V√¥ hi·ªáu h√≥a khi ƒëang t·∫£i
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            backgroundColor: Colors.green.shade300,
                          ),
                          child: _isLoading
                              ? const CircularProgressIndicator(color: Colors.white, strokeWidth: 2)
                              : const Text(
                            "ƒêƒÉng nh·∫≠p",
                            style: TextStyle(fontSize: 16, color: Colors.white),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      // N√∫t "Qu√™n m·∫≠t kh·∫©u?"
                      TextButton(
                        onPressed: () => ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("‚ö†Ô∏è Ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u ch∆∞a h·ªó tr·ª£")),
                        ),
                        child: const Text("Qu√™n m·∫≠t kh·∫©u?", style: TextStyle(color: Colors.grey)),
                      ),
                      // N√∫t "ƒêƒÉng k√Ω ngay"
                      TextButton(
                        onPressed: () => Navigator.pushNamed(context, '/register'),
                        child: const Text(
                          "Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω ngay",
                          style: TextStyle(color: Colors.deepOrange),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  // Ph∆∞∆°ng th·ª©c helper ƒë·ªÉ t·∫°o InputDecoration cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
  InputDecoration _inputDecoration(String label, IconData icon) {
    return InputDecoration(
      labelText: label,
      labelStyle: const TextStyle(color: Colors.grey),
      prefixIcon: Icon(icon, color: Colors.orange),
      filled: true,
      fillColor: Colors.white.withOpacity(0.9),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide.none,
      ),
    );
  }
}